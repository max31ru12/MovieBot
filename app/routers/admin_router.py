from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

from app.config import bot, MOVIE_CHANNEL_ID
from app.database.services import (
    add_movie_to_db,
    get_user_by_kwargs,
    update_movie_by_id,
)
from app.keyboards.admin_keyboard import (
    base_admin_menu,
    cancel_getting_movie_admin_menu,
    cancel_adding_movie_admin_menu,
    cancel_broadcast_admin_menu,
)
from app.messages import AdminMessages
from app.utils.utils import forward_movie_message, broadcast

router = Router()


class AddFilmState(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_genre = State()
    waiting_for_photo = State()


@router.message(F.text == AdminMessages.ADD_MOVIE.value)
async def start_adding_film(message: Message, state: FSMContext):
    user_db = await get_user_by_kwargs(tg_username=message.from_user.username)
    if user_db is None or not user_db.is_admin:
        await message.answer("–¢–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è, —É–±–∏—Ä–∞–π—Å—è!")
        return

    await state.set_state(AddFilmState.waiting_for_title)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: ", reply_markup=cancel_adding_movie_admin_menu
    )


@router.message(AddFilmState.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await state.set_state(AddFilmState.waiting_for_description)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: ", reply_markup=cancel_adding_movie_admin_menu
    )


@router.message(AddFilmState.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await state.set_state(AddFilmState.waiting_for_genre)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä/–∂–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–∞", reply_markup=cancel_adding_movie_admin_menu
    )


@router.message(AddFilmState.waiting_for_genre)
async def process_genre(message: Message, state: FSMContext):
    await state.update_data(genre=message.text.strip())
    await state.set_state(AddFilmState.waiting_for_photo)
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ (–ø–æ—Å—Ç–µ—Ä) —Ñ–∏–ª—å–º–∞:", reply_markup=cancel_adding_movie_admin_menu
    )


@router.message(AddFilmState.waiting_for_photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    # –ó–¥–µ—Å—å –±—ã –ø–æ-—Ö–æ—Ä–æ—à–µ–º—É —Å–¥–µ–ª–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    movie = await add_movie_to_db()

    data = await state.get_data()
    file_id = message.photo[-1].file_id
    post_text = (
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
        f"<b>–ö–æ–¥:</b> {movie.id}\n"
        f"<b>–ñ–∞–Ω—Ä:</b> {data['genre']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}"
    )

    post = await bot.send_photo(
        chat_id=MOVIE_CHANNEL_ID,
        photo=file_id,
        caption=post_text,
        parse_mode="HTML",
    )

    message_id = int(post.message_id)

    await update_movie_by_id(movie_id=movie.id, message_id=message_id)
    await message.answer("‚úÖ –§–∏–ª—å–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!", reply_markup=base_admin_menu)
    await state.clear()


class GetMovieByAdmin(StatesGroup):
    waiting_for_code = State()


@router.message(F.text == AdminMessages.GET_MOVIE_BY_CODE.value)
async def get_movie_by_code_admin(message: Message, state: FSMContext):
    user_db = await get_user_by_kwargs(tg_username=message.from_user.username)
    if user_db is None or not user_db.is_admin:
        await message.answer("–¢–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è, —É–±–∏—Ä–∞–π—Å—è!")
        return
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥ —Ñ–∏–ª—å–º–∞", reply_markup=cancel_getting_movie_admin_menu
    )
    await state.set_state(GetMovieByAdmin.waiting_for_code)


@router.message(GetMovieByAdmin.waiting_for_code)
async def process_code_input_admin(message: Message, state: FSMContext):
    if message.text == AdminMessages.CANCEL_GETTING_MOVIE.value:
        await state.clear()
        await message.answer("–í–≤–æ–¥ —Ñ–∏–ª—å–º–∞ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=base_admin_menu)
        return

    await forward_movie_message(bot, message, cancel_getting_movie_admin_menu)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...", reply_markup=base_admin_menu)


class BroadcastState(StatesGroup):
    waiting_for_message = State()


@router.message(F.text == AdminMessages.BROADCAST_MESSAGE.value)
async def start_broadcasting_message(message: Message, state: FSMContext):
    user_db = await get_user_by_kwargs(tg_username=message.from_user.username)
    if user_db is None or not user_db.is_admin:
        await message.answer("–¢–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è, —É–±–∏—Ä–∞–π—Å—è!")
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ", reply_markup=cancel_broadcast_admin_menu
    )
    await state.set_state(BroadcastState.waiting_for_message)


@router.message(BroadcastState.waiting_for_message)
async def broadcast_message(message: Message, state: FSMContext):
    if message.text == AdminMessages.CANCEL_BROADCAST.value:
        await state.clear()
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=base_admin_menu)
        return

    await broadcast(bot, message.text)
    await state.clear()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä–µ—à–µ–Ω–∞!", reply_markup=base_admin_menu)


# –≤—Å—è–∫–∏–µ –æ—Ç–º–µ–Ω—è–ª–∫–∏ –≤–Ω–∏–∑—É


@router.message(F.text == AdminMessages.CANCEL_ADDING_MOVIE.value)
async def process_cancel_adding_movie(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer(
            "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å. –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=base_admin_menu,
        )
        return
    await state.clear()
    await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=base_admin_menu)


@router.message(F.text == AdminMessages.CANCEL_BROADCAST.value)
async def process_cancel_broadcast(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer(
            "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å. –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏.",
            reply_markup=base_admin_menu,
        )
        return
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=base_admin_menu)
    await state.clear()
