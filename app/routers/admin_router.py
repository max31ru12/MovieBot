from aiogram import Router, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

from app.database.services import (
    add_movie_to_db,
    CodeAlreadyExistsError,
    NameAlreadyExistsError,
    check_movie_exists,
    get_last_movie,
)
from app.keyboards.admin_keyboard import base_admin_menu, cancel_movie_admin_menu
from app.utils import check_user_is_admin, check_user_is_creator

router = Router()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞
class AddMovieState(StatesGroup):
    waiting_for_code = State()
    waiting_for_name = State()


@router.message(F.text == "üì• –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º")
async def add_movie(message: Message, bot: Bot, state: FSMContext):
    is_admin = await check_user_is_admin(bot, message, message.chat.id)
    is_creator = await check_user_is_creator(bot, message.from_user.id, message.chat.id)

    if is_admin or is_creator:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ): ",
            reply_markup=cancel_movie_admin_menu,
        )
        await state.set_state(AddMovieState.waiting_for_code)
    else:
        await message.answer("–ü–æ—à–µ–ª –Ω–∞—Ö—É–π –æ—Ç—Å—é–¥–∞")


@router.message(AddMovieState.waiting_for_code)
async def process_movie_code(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞":
        await state.clear()
        await message.answer(
            "üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=base_admin_menu
        )
        return

    if not message.text.isdigit():
        await message.answer(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥ —Ñ–∏–ª—å–º–∞.",
            reply_markup=cancel_movie_admin_menu,
        )
        return

    code = int(message.text)

    try:
        await check_movie_exists(code=code)
        await state.update_data(movie_code=code)
        await message.answer(
            "–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:",
            reply_markup=cancel_movie_admin_menu,
        )
        await state.set_state(AddMovieState.waiting_for_name)
        return
    except CodeAlreadyExistsError:
        await message.answer(
            "–§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=cancel_movie_admin_menu
        )


@router.message(AddMovieState.waiting_for_name)
async def process_movie_name(message: Message, state: FSMContext):
    # –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞":
        await state.clear()
        await message.answer(
            "üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=base_admin_menu
        )
        return

    name = message.text.strip()

    if not name:
        await message.answer(
            "‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑:",
            reply_markup=cancel_movie_admin_menu,
        )
        return

    data = await state.get_data()
    code = data.get("movie_code")

    try:
        await check_movie_exists(name=name)
        await add_movie_to_db(code, name)
        await message.answer(f"‚úÖ –§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω: <b>{code}</b> ‚Äì {name}")
        await state.clear()
    except NameAlreadyExistsError:
        await message.answer(
            "–§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=base_admin_menu
        )
        return


@router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞")
async def process_cancel_adding_movie(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=base_admin_menu)


@router.message(F.text == "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∏–ª—å–º")
async def get_last_movie_info(message: Message):
    last_movie = await get_last_movie()
    await message.answer(
        f"<b>–ö–æ–¥:</b> {last_movie.code} \n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {last_movie.name}",
        parse_mode="HTML",
    )
